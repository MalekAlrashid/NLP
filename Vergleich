{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0b38be71",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "42950f47",
   "metadata": {},
   "outputs": [],
   "source": [
    "#vergleich zwischen zwei arrays \n",
    "\n",
    "A = np.array([7,3])\n",
    "B = np.array([3,7])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f5c7863d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# axes f√ºr zeichnen X und Y \n",
    "#ax = plt.axes()\n",
    "#ax.arrow(0.0, 0.0, A[0], A[1], head_width=0.4, head_length= 0.5)\n",
    "#plt.annotate(f\"A({A[0]},{A[1]})\", xy=(A[0], A[1]),xytext=(A[0]+0.5,A[1] ) \n",
    "#ax.arrow(0.0, 0.0, B[0], B[1], head_width=0.4, head_length=0.5)\n",
    "#plt.annotate(f\"B({B[0]},{B[1]})\", xy=(B[0], B[1]), xytext=B[0]+0.5,B[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "aeaf6710",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(3.5, 7, 'B(3,7)')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = plt.axes()\n",
    "ax.arrow(0.0, 0.0, A[0], A[1], head_width=0.4, head_length=0.5)\n",
    "plt.annotate(f\"A({A[0]},{A[1]})\", xy=(A[0], A[1]),xytext=(A[0]+0.5, A[1]))\n",
    "ax.arrow(0.0, 0.0, B[0], B[1], head_width=0.4, head_length=0.5)\n",
    "plt.annotate(f\"B({B[0]},{B[1]})\", xy=(B[0], B[1]),xytext=(B[0]+0.5, B[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6ce67e91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD8CAYAAACMwORRAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAK+0lEQVR4nO3cUYhlB33H8d+/WUWzVlQcRRMhCpJUAiV2aKMBEaNgq5g+tBBBSUXYl1ajCBL74qsPIvpQhCVGBUOkxIAixRqiUgoldJIIJq6iqE1WVzNSquJDo/jvw9yw6Wrc2Xtu9q7//XxgmXvv3HPOn8POd8+cPfdUdweAWf5o2wMAsHniDjCQuAMMJO4AA4k7wEDiDjDQWeNeVbdV1aNV9eATXnteVd1dVd9ZfX3uUzsmAOfiMEfun0ryxjNeuyXJPd398iT3rJ4DcIGow3yIqaquSPLF7r569fzbSV7b3aeq6kVJvtbdVz6lkwJwaEfWXO6F3X0qSVaBf8GTvbGqjiU5liRHjx79s6uuumrNTQJcnO67776fdvfOuSyzbtwPrbuPJzmeJLu7u723t/dUbxJglKr6r3NdZt2rZX6yOh2T1ddH11wPAE+BdeP+hSQ3rR7flOTzmxkHgE04zKWQdyT5jyRXVtXJqnpnkg8leUNVfSfJG1bPAbhAnPWce3e/9Um+df2GZwFgQ3xCFWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBloU96p6b1U9VFUPVtUdVfWMTQ0GwPrWjntVXZbk3Ul2u/vqJJckuXFTgwGwvqWnZY4keWZVHUlyaZIfLR8JgKXWjnt3/zDJh5M8nORUkp9195fPfF9VHauqvara29/fX39SAA5tyWmZ5ya5IclLk7w4ydGqetuZ7+vu49292927Ozs7608KwKEtOS3z+iTf7+797v5VkruSvHozYwGwxJK4P5zk2qq6tKoqyfVJTmxmLACWWHLO/d4kdya5P8k3Vus6vqG5AFjgyJKFu/uDST64oVkA2BCfUAUYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBloU96p6TlXdWVXfqqoTVfWqTQ0GwPqOLFz+Y0m+1N1/U1VPT3LpBmYCYKG1415Vz07ymiR/lyTd/ViSxzYzFgBLLDkt87Ik+0k+WVUPVNWtVXX0zDdV1bGq2quqvf39/QWbA+CwlsT9SJJXJvl4d1+T5JdJbjnzTd19vLt3u3t3Z2dnweYAOKwlcT+Z5GR337t6fmcOYg/Alq0d9+7+cZJHqurK1UvXJ/nmRqYCYJGlV8u8K8ntqytlvpfkHctHAmCpRXHv7q8n2d3MKABsik+oAgwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQOIOMJC4Awwk7gADiTvAQIvjXlWXVNUDVfXFTQwEwHKbOHK/OcmJDawHgA1ZFPequjzJm5LcuplxANiEpUfuH03y/iS/ebI3VNWxqtqrqr39/f2FmwPgMNaOe1W9Ocmj3X3f73tfdx/v7t3u3t3Z2Vl3cwCcgyVH7tcleUtV/SDJZ5O8rqo+s5GpAFhk7bh39we6+/LuviLJjUm+0t1v29hkAKzNde4AAx3ZxEq6+2tJvraJdQGwnCN3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWAgcQcYSNwBBhJ3gIHEHWCgteNeVS+pqq9W1Ymqeqiqbt7kYACs78iCZX+d5H3dfX9V/XGS+6rq7u7+5oZmA2BNax+5d/ep7r5/9fgXSU4kuWxTgwGwvo2cc6+qK5Jck+Te3/G9Y1W1V1V7+/v7m9gcAGexOO5V9awkn0vynu7++Znf7+7j3b3b3bs7OztLNwfAISyKe1U9LQdhv72779rMSAAsteRqmUryiSQnuvsjmxsJgKWWHLlfl+TtSV5XVV9f/fmrDc0FwAJrXwrZ3f+epDY4CwAb4hOqAAOJO8BA4g4wkLgDDCTuAAOJO8BA4g4wkLgDDCTuAAOJO8BA4g4wkLgDDCTuAAOJO8BA4g4wkLgDDCTuAAOJO8BA4g4wkLgDDCTuAAOJO8BA4g4wkLgDDCTuAAOJO8BA4g4wkLgDDCTuAAOJO8BA4g4wkLgDDCTuAAOJO8BA4g4w0KK4V9Ubq+rbVfXdqrplU0MBsMzaca+qS5L8U5K/TPKKJG+tqldsajAA1rfkyP3Pk3y3u7/X3Y8l+WySGzYzFgBLHFmw7GVJHnnC85NJ/uLMN1XVsSTHVk//t6oeXLDNSZ6f5KfbHuICYV+cZl+cZl+cduW5LrAk7vU7XuvfeqH7eJLjSVJVe929u2CbY9gXp9kXp9kXp9kXp1XV3rkus+S0zMkkL3nC88uT/GjB+gDYkCVx/88kL6+ql1bV05PcmOQLmxkLgCXWPi3T3b+uqn9I8q9JLklyW3c/dJbFjq+7vYHsi9Psi9Psi9Psi9POeV9U92+dJgfgD5xPqAIMJO4AA52XuLtNwYGqeklVfbWqTlTVQ1V187Zn2raquqSqHqiqL257lm2qqudU1Z1V9a3V349XbXumbamq965+Ph6sqjuq6hnbnul8qqrbqurRJ34mqKqeV1V3V9V3Vl+fe7b1POVxd5uC/+fXSd7X3X+S5Nokf38R74vH3ZzkxLaHuAB8LMmXuvuqJH+ai3SfVNVlSd6dZLe7r87BxRo3bneq8+5TSd54xmu3JLmnu1+e5J7V89/rfBy5u03BSnef6u77V49/kYMf4Mu2O9X2VNXlSd6U5NZtz7JNVfXsJK9J8okk6e7Huvt/tjrUdh1J8syqOpLk0lxkn5/p7n9L8t9nvHxDkk+vHn86yV+fbT3nI+6/6zYFF23QHldVVyS5Jsm9Wx5lmz6a5P1JfrPlObbtZUn2k3xydYrq1qo6uu2htqG7f5jkw0keTnIqyc+6+8vbneqC8MLuPpUcHCQmecHZFjgfcT/UbQouJlX1rCSfS/Ke7v75tufZhqp6c5JHu/u+bc9yATiS5JVJPt7d1yT5ZQ7xa/dEq3PJNyR5aZIXJzlaVW/b7lR/mM5H3N2m4Amq6mk5CPvt3X3XtufZouuSvKWqfpCDU3Wvq6rPbHekrTmZ5GR3P/5b3J05iP3F6PVJvt/d+939qyR3JXn1lme6EPykql6UJKuvj55tgfMRd7cpWKmqysF51RPd/ZFtz7NN3f2B7r68u6/Iwd+Jr3T3RXmE1t0/TvJIVT1+57/rk3xziyNt08NJrq2qS1c/L9fnIv3P5TN8IclNq8c3Jfn82RZYclfIQ1nzNgVTXZfk7Um+UVVfX732j939L9sbiQvEu5LcvjoA+l6Sd2x5nq3o7nur6s4k9+fg6rIHcpHdhqCq7kjy2iTPr6qTST6Y5ENJ/rmq3pmDfwD/9qzrcfsBgHl8QhVgIHEHGEjcAQYSd4CBxB1gIHEHGEjcAQb6P3vRSWepHaazAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlim(0,10)\n",
    "plt.ylim(0,10)\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "009b1b89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cosine Similarity between A and B :0.7241379310344827\n"
     ]
    }
   ],
   "source": [
    "cos_sim= np.dot(A,B)/(np.linalg.norm(A)*np.linalg.norm(B))\n",
    "print(f\"Cosine Similarity between A and B :{cos_sim}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f06b12e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06d91049",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
